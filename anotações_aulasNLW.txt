tipos de parametros ::

- Routes Params =>  fazem parte da nossa rota(fazer busca por id, por exemplo em uma rota de Produtos)


- Query Params => Quando a gente quer fazer um filtro(consulta), por exemplo buscar um produto com nome de teclado

..tem como conceito chave : valor
diferença dos route params é que ela tem parametros nao obrigatorios

modelo : http://localhost:3000/produtos?name=teclado&description=tecladobom

- Body Params => sao parametros que virao no corpo da nossa requisicao

"name": "teclado",
"description": "tecladobom"

utilizamos o body params para metodo post, put e path

----BANCO DE DADOS::

>>Tem o drivers do banco de dados:
ex : Postgress, MySQL, MongoDB
seria a forma nativa do body

>>QueryBuilders :: Permite que escrevemos nossas Query de forma automatica
ex : knex
vantagens :: tem padrões para todos os tipos de body

>>ORM
:: Object Relation Map 
- Frameworks que ajudam no mapeamento entre a entidade e o objeto

eles pegam o nosso codigo(ex codigo em js e transforma ele para uma forma que o bd consiga entender)

conseguimos automatizar as inserções, os select
faz o bd reconhecer em nosso codigo um objeto como sendo uma tabela, por exemplo


--Exemplos de ORM :::

Sequalize, TypeORM(no typescript), Prisma

Temos métodos já prontos(como o finone, dentre outros....)


BD UTILIZADO NO PROJETO VALORIZA ::: TypeORM


>>>MIGRATIONS::
O que são ? é um controle de versionamento de tabelas dentro
da aplicação 
consegue ter um controle do que foi executado e do que precisa ser executado

>>CLI ::
CLI é uma ferramenta que podemos usar no terminal ele da a opcao de instalar o typeorm de forma global


>>TEMOS NA MIGRATION 2 MÉTODOS : UP E DOWN

O up é para criar e o down é para desfazer

>>ENTITIES ::
Entidades sao as tabelas do PROJETO
ORDEM DE EXECUÇÃO :
Entidade < - > ORM < - > BD {users}

>>>CONSTRUCTOR

---Constructor é um metodo que vai ser executado toda vez que houver uma instancia de classe(new NomeDaClasse())


>>>REPOSITÓRIO:::

Entidade < - > ORM < - > BD 

eu nao consigo diretamente da minha entidade acessar meu bd
é preciso ter uma nova camada para fazer essa comunicação
essa camada é o repositorio


>>>>SERVICES::

Toda aplicacao tem as regras da aplicacao
ex::

Regras 

Cadastro de Usuarios
 - Nao é permitido cadastrar mais de um usuario com o mesmo email
 - Nao é permitido cadastrar usuario sem email

 Cadastro de TAG
    - nao é permitido cadastrar mais de uma tag com o mesmo nome
    - nao e permitido cadastrar tag sem nome
    - nao e permitido o cadsatro por usuarios que nao sejam administradores

Cadastro de elogios

    - nao é permitido um usuario cadastrar um elogio para si
    - nao é permitido cadastrar elogios para usuarios invalidos
    - usuario precisa estar autenticado durante a aplicacao

Camada responsavel por fazer toda a validacao ANTES que a requisicao seje enviada ao 
banco de dados, ou enviar algo ao cliente


>>>CONTROLLER::


>- server -> controller > service ->

controller vai ser o request e o response 
vai servir para pegar a informacao do server(da nossa rota) e repassar para o service


>>Tratamento de Excessao ::

>>_ Controller --> Service (throw new Error)
Estamos repassando a excessao para a camada acima(nesse caso, é o controller)

Pode utilizar o Try Catch(), porem quando a aplicação ficar muito
grande já não seria o suficiente usar somente o try catch()

pois o codigo nao ficaria clean

>>>FLUXO DA APLICAÇÃO::
server > routes > controller > service > repository > entity(model)


>>>MIDDLEWARES:::

São interceptadores que a gente tem dentro de uma requisicao, a gente pode tanto interromper a rota ou continuar ela
colocando algo novo por meio do middlware

>>>ETAPAS DE CRIAÇÃO DAS CAMADAS PARA CADA TABELA :

Migrations -> Entities -> Repositories -> SERVICES -> Controller

obs:: É na camada service que a gente faz todas as regras de negocio da nossa aplicação back end


>>>O QUE É O JWT ??

JSON Web Token, ele permite que fazemos a comunicação entre as requisicao usando um Token
validar token(se é válido, se expirou etc)

Ele é um token que passamos para nossa requisicao e fazemos a autenticacao

Ele é divido em 3 partes ::
- Header : qual o tipo de token, qual o algoritmo que ele usa para fazer a criptografia dos dados
- PeyLoad : Você passa as informacoes(Como id, nome etc) para o frontend usar esse token
nao pode passar dados sensiveis ao PeyLoad
- Verify Signature : tera as base url


OBS DE BOA PRATICA :: NUNCA, JAMAIS ARMAZENE SENHAS NO BANCO DE DADOS COMO A SENHA PADRAO MESMO, 
É PRECISO ENCRIPTOGRAFAR A SENHA



